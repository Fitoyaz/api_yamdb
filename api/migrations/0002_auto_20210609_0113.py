# Generated by Django 3.0.5 on 2021-06-08 20:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Напишите название категории', max_length=50, verbose_name='Название категории')),
                ('slug', models.SlugField(unique=True, verbose_name='Идентификатор категории')),
                ('category_description', models.TextField(blank=True, help_text='Дайте краткое описание категории', verbose_name='Описание категории')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Напишите комментарий', max_length=300, verbose_name='Описание комментария')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата добавления')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='ConfCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=128)),
                ('eml_conf_code', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Genres',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Напишите название жанра', max_length=50, verbose_name='Название жанра')),
                ('slug', models.SlugField(unique=True, verbose_name='Идентификатор жанра')),
                ('genre_description', models.TextField(help_text='Дайте краткое описание жанра', verbose_name='Описание жанра')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, 'Оценка не может быть меньше 1'), django.core.validators.MaxValueValidator(10, 'Оценка не может быть выше 10')], verbose_name='Оценка')),
                ('review_name', models.CharField(blank=True, help_text='Напишите тему отзыва', max_length=300, verbose_name='Тема отзыва')),
                ('review_discriprion', models.CharField(blank=True, help_text='Напишите отзыв', max_length=300, verbose_name='Описание отзыва')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата добавления')),
                ('text', models.TextField(help_text='Напишите тему отзыва', max_length=3000, verbose_name='Тема отзыва')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Titles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Напишите здесь название произведения', verbose_name='Название')),
                ('year', models.IntegerField(help_text='Напишите здесь год выпуска произведения', verbose_name='Год выпуска')),
                ('description', models.TextField(help_text='Напишите здесь название произведения', verbose_name='Описание')),
                ('category', models.ForeignKey(blank=True, help_text='Выберите категорию произведения', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='titles', to='api.Categories', verbose_name='Slug категории')),
                ('genre', models.ManyToManyField(db_table='title-genre-table', help_text='Выберите жанр произведения', related_name='titles', to='api.Genres', verbose_name='Slug жанра')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.DeleteModel(
            name='UserAccount',
        ),
        migrations.AddField(
            model_name='user',
            name='bio',
            field=models.TextField(max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='review',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='review',
            name='titles',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.Titles'),
        ),
        migrations.AddField(
            model_name='confcode',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='confcode', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='review',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.Review'),
        ),
        migrations.AddConstraint(
            model_name='titles',
            constraint=models.UniqueConstraint(fields=('name', 'category'), name='unigue_category'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('titles', 'author')},
        ),
    ]
